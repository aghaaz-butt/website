<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pion</title>
    <link>https://pion.ly/</link>
    <description>Recent content on Pion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://pion.ly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebRTC Introduction</title>
      <link>https://pion.ly/knowledge-base/webrtc-basics/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/webrtc-basics/intro/</guid>
      <description>// TODO
Signaling // TODO
Network Address Translation // TODO</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>https://pion.ly/knowledge-base/pion-internals/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/pion-internals/contributing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://pion.ly/knowledge-base/pion-basics/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/pion-basics/faq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Join us on Slack</title>
      <link>https://pion.ly/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/slack/</guid>
      <description> Pion has a vibrant community on the Golang Slack. We love hearing about what you are building using our tools. Need help? You&amp;rsquo;re likely to find someone willing to assist in making your idea a reality.
Join the Slack by following these two easy steps:  Invite yourself to the Golang Slack. Join the #pion channel.  </description>
    </item>
    
    <item>
      <title>Pion WebRTC v2.0.0 Release Notes</title>
      <link>https://pion.ly/knowledge-base/release-notes/webrtc-v2.0.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/release-notes/webrtc-v2.0.0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>WebRTC Architecture</title>
      <link>https://pion.ly/knowledge-base/webrtc-basics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/webrtc-basics/architecture/</guid>
      <description>This article covers the major components used in a WebRTC deployment. Please note that the article assumes you have a basic understanding of WebRTC. Consider reading trough the WebRTC Introduction if you are new to WebRTC.
Signaling server The first step in setting up a WebRTC connection is what&amp;rsquo;s known as signaling. This is en exchange of information needed to safely connect two peers to each other. The WebRTC API provides this data in a plain text a format known as SDP.</description>
    </item>
    
    <item>
      <title>WebRTC Data Channels in Go</title>
      <link>https://pion.ly/knowledge-base/pion-basics/data-channels-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/pion-basics/data-channels-introduction/</guid>
      <description>Today we&amp;rsquo;ll walk through setting up a Data Channel connection in Go using pion/webrtc. Check out our knowledge base articles on WebRTC if you&amp;rsquo;re new to it. You can also skip to the full examples if you just want to look at the code.
Preparation Let&amp;rsquo;s quickly cover how to get started with pion/webrtc. If you&amp;rsquo;re familiar with Go you can skip to the next section. To start you can download the library using go get: go get github.</description>
    </item>
    
    <item>
      <title>WebRTC Deep Dive</title>
      <link>https://pion.ly/knowledge-base/webrtc-basics/deep-dive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/webrtc-basics/deep-dive/</guid>
      <description> TODO </description>
    </item>
    
    <item>
      <title>WebRTC Everywhere</title>
      <link>https://pion.ly/knowledge-base/pion-basics/webrtc-everywhere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/pion-basics/webrtc-everywhere/</guid>
      <description>In this post we&amp;rsquo;ll take a look at all the places you can run pion/webrtc.
Server The first use-case for a Go WebRTC library naturally is running WebRTC on the server. This enables you to connect to browsers and other WebRTC servers directly while punching through NATs. Because the Pion WebRTC stack is written completely in Go, you can run it anywhere Go runs. And that&amp;rsquo;s a lot of places, including: Linux, macOS and Windows on both x86 and ARM.</description>
    </item>
    
    <item>
      <title>What is WebRTC solving?</title>
      <link>https://pion.ly/knowledge-base/webrtc-basics/what-it-solves/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/webrtc-basics/what-it-solves/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Why Pion</title>
      <link>https://pion.ly/knowledge-base/pion-basics/why-pion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pion.ly/knowledge-base/pion-basics/why-pion/</guid>
      <description>&amp;lsquo;Why would I use Pion&amp;rsquo; this is the first question we get asked by potential users, and it is a great one. Learning new software is an investment, as developers we know how frustrating it can be when you make the wrong choice.
The answer is different depending on your needs. However it seems to always come down to a few major reasons. Here is what drives Pion, and why we think you should give us a try.</description>
    </item>
    
  </channel>
</rss>